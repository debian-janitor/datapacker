<!DOCTYPE reference PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
  <!ENTITY datapacker "<application>datapacker</application>">
]>
<!--      "file:///usr/share/sgml/docbook/dtd/xml/4.2/docbookx.dtd"> -->

<reference>
  <title>datapacker Manual</title>

  <refentry>
    <refentryinfo>
      <address><email>jgoerzen@complete.org</email></address>
      <author><firstname>John</firstname><surname>Goerzen</surname></author>
    </refentryinfo>

    <refmeta>
      <refentrytitle>datapacker</refentrytitle>
      <manvolnum>1</manvolnum>
      <refmiscinfo>John Goerzen</refmiscinfo>
    </refmeta>

    <refnamediv>
      <refname>datapacker</refname>
      <refpurpose>Tool to pack files into the minimum number
        of bins</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
        <command>datapacker</command>
        <arg>-0</arg>
        <arg>-b <replaceable>FORMAT</replaceable></arg>
        <arg>-d</arg>
        <arg>-p</arg>
        <arg>-S <replaceable>SIZE</replaceable></arg>
        <arg choice="plain">-s <replaceable>SIZE</replaceable></arg>
        <arg choice="plain" rep="repeat"><replaceable>FILE</replaceable></arg>
      </cmdsynopsis>
      <cmdsynopsis>
	<command>datapacker</command>
	<group choice="plain"><arg>-h</arg><arg>--help</arg></group>
      </cmdsynopsis>
    </refsynopsisdiv>

    <refsect1>
      <title>Description</title>

      <para>&datapacker; is a tool to group files by size.  It is
        designed to group files such that they fill fixed-size
        containers (called "bins") using the minimum number of
        containers.  This is useful, for instance, if you want to
        archive a number of files to CD or DVD, and want to organize
        them such that you use the minimum possible number of CDs or
        DVDs.
      </para>
      
      <para>
        &datapacker; is a tool in the traditional Unix style; it can
        be used in pipes and call other tools.
      </para>

    <refsect1>
      <title>Quick Start</title>
      <para>
        FIXME: write this
      </para>
    </refsect1>


    <refsect1>
      <title>Options</title>
      <para>
        Here are the command-line options you may set for
        &datapacker;.  Please note that <option>-s</option> and at
        least one file (see FILE SPECIFICATION below) is mandatory.
      </para>

      <variablelist>
        <varlistentry>
          <term>-0</term>
          <term>--null</term>
          <listitem><para>
              When reading a list of files from standard input (see
              FILE SPECIFICATION below), expect the input to be
              separated by NULL (ASCII 0) characters instead of one
              per line.  Especially useful with <command>find
                -print0</command>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-b <replaceable>FORMAT</replaceable></term>
          <term>--binfmt=<replaceable>FORMAT</replaceable></term>
          <listitem>
            <para>
              Defines the output format for the bin name.  This format
              is given as a <literal>%d</literal> input to a function
              that interprets it as
              <application>printf</application>(3) would.
              This can be useful both to define the name and the
              location of your bins.  When running &datapacker; with
              certain arguments, the bin format can be taken to be a
              directory in which files in that bin are linked.  The
              default is <literal>%03d</literal>, which outputs
              integers with leading zeros to make all bin names at
              least three characters wide.
            </para>
            <para>
              Other useful variants could include
              <literal>destdir/%d</literal> to put the string
              <literal>"destdir/</literal> in front of the bin number,
              which is rendered without leading zeros.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-d</term>
          <term>--debug</term>
          <listitem>
            <para>
              Enable debug mode.  This is here for future expansion
              and does not currently have any effect.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>--help</term>
          <listitem>
            <para>
              Display brief usage information and exit.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-p</term>
          <term>--preserve-order</term>
          <listitem>
            <para>
              Normally, &datapacker; uses an efficient algorithm that
              tries to rearrange files such that the number of bins
              required is minimized.  Sometimes you may instead wish
              to preserve the ordering of files at the expense of
              potentially using more bins.  In these cases, you would
              want to use this option.
            </para>
            <para>
              As an example of such a situation: perhaps you have
              taken one photo a day for several years.  You would like
              to archive these photos to CD, but you want them to be
              stored in chronological order.  You have named the files
              such that the names indicate order, so you can pass the
              file list to &datapacker; using <option>-p</option> to
              preserve the ordering in your bins.  Thus, bin 1 will
              contain the oldest files, bin 2 the second-oldest, and
              so on.  If <option>-p</option> wasn't used, you might
              use fewer CDs, but the photos would be spread out across
              all CDs without preserving your chronological order.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-s <replaceable>SIZE</replaceable></term>
          <term>--size=<replaceable>SIZE</replaceable></term>
          <listitem>
            <para>
              Gives the size of each bin in bytes.  Suffixes such as
              "k", "m", "g", etc. may be used to indicate kilobytes,
              megabytes, gigabytes, and so forth.  Numbers such as
              <literal>1.5g</literal> are valid, and if needed, will
              be rounded to the nearest possible integer value.
            </para>
            <para>
              The size of the first bin may be overridden with
              <option>-S</option>.
            </para>
            <para>
              Here are the sizes of some commonly-used bins.  For each
              item, I have provided you with both the underlying
              recording capacity of the disc and a suggested value for
              <option>-s</option>.  The suggested value for
              <option>-s</option> is lower than the underlying
              capacity because there is overhead imposed by the
              filesystem stored on the disc.  You will perhaps find
              that the suggested value for <option>-s</option> is
              lower than optimal for discs that contain few large
              files, and higher than desired for discs that contain
              vast amounts of small files.
            </para>
            <itemizedlist>
              <listitem><para>CD-ROM, 74-minute (standard): 650m / 600m</para>
              </listitem>
              <listitem><para>CD-ROM, 80-minute: 703m / 650m</para>
              </listitem>
              <listitem><para>CD-ROM, 90-minute: 790m / 740m</para>
              </listitem>
              <listitem><para>CD-ROM, 99-minute: 870m / 820m</para>
              </listitem>
              <listitem><para>DVD+-R: 4.377g / 4g</para>
              </listitem>
              <listitem><para>DVD+R, dual layer: 8.5g / 8g</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term>-S</term>
          <term>--size-first</term>
          <listitem>
            <para>
              The size of the first bin.  If not given, defaults to
              the value given with <option>-s</option>.  This may be
              useful if you will be using a mechanism outside
              &datapacker; to add additional information to the first
              bin: perhaps an index of which bin has which file, the
              information necessary to make a CD bootable, etc.  You
              may use the same suffixes as with <option>-s</option>
              with this option.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <refsect2>
        <title>File Specification</title>
        <para>
          After the options, you must supply one or more files to
          consider for packing into bins.  Alternatively, instead of
          listing files on the command line, you may list a single
          hyphen (<literal>-</literal>), which tells &datapacker; to
          read the list of files from standard input (stdin).
        </para>
        <para>
          When reading files from standard input, it is assumed that
          the list contains one distinct filename per line.  Seasoned
          POSIX veterans will recognize the inherent limitations in
          this format.  For that reason, when given
          <option>-0</option> in conjunction with the single file
          <literal>-</literal>, &datapacker; will instead expect, on
          standard input, a list of files, each one terminated by an
          ASCII NULL character.  Such a list can be easily generated
          with <application>find</application>(1) using its
          <option>-print0</option> option.
        </para>
      </refsect2>
    </refsect1>

    <refsect1>
      <title>User Interfaces</title>
      <para>&datapacker; has a pluggable user interface system that lets you choose how the
	program communicates information to you.  There are two graphical
	interfaces, two terminal interfaces, and two noninteractive interfaces
	suitable for scripting or logging purposes.  The
	<property>ui</property> option in the configuration file specifies
	user interface preferences.  The <option>-u</option> command-line
	option can override the configuration file setting.  The available
	values for the configuration file or command-line are described
	in this section.</para>

      <refsect2>
	<title>Curses.Blinkenlights</title>
	<para>
                Curses.Blinkenlights is an interface designed to be sleek, fun to watch, and
	  informative of the overall picture of what &datapacker;
	  is doing.  I consider it to be the best general-purpose interface in
	  &datapacker;.
	</para>
	<para>
	  Curses.Blinkenlights contains a row of
          "LEDs" with command buttons and a log.
	  The  log shows more
	  detail about what is happening and is color-coded to match the color
	  of the lights.
	</para>
	<para>
	  Each light in the Blinkenlights interface represents a thread
	  of execution -- that is, a particular task that &datapacker;
	  is performing right now.  The colors indicate what task
	  the particular thread is performing, and are as follows:
	</para>
	<variablelist>
	  <varlistentry>
	    <term>Black</term>
	    <listitem><para>indicates that this light's thread has terminated; it will light up
	      again later when new threads start up.  So, black indicates no
	      activity.
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Red (Meaning 1)</term>
	    <listitem><para>is the color of the main program's thread, which basically does
	      nothing but monitor the others.  It might remind you of HAL 9000 in
	      <citation>2001</citation>.
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Gray</term>
	    <listitem><para>indicates that the thread is establishing a new connection to the IMAP
	      server.
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Purple</term>
	    <listitem><para>is the color of an account synchronization thread that is monitoring
	      the progress of the folders in that account (not generating any I/O).
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Cyan</term>
	    <listitem><para>indicates that the thread is syncing a folder.
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Green</term>
	    <listitem><para>means that a folder's message list is being loaded.
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Blue</term>
	    <listitem><para>is the color of a message synchronization controller thread.
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Orange</term>
	    <listitem><para>indicates that an actual message is being copied.
	      (We use fuchsia for fake messages.)
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Red (meaning 2)</term>
	    <listitem><para>indicates that a message is being deleted.
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Yellow / bright orange</term>
	    <listitem><para>indicates that message flags are being added.
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Pink / bright red</term>
	    <listitem><para>indicates that message flags are being removed.
	    </para></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Red / Black Flashing</term>
	    <listitem><para>corresponds to the countdown timer that runs between
	      synchronizations.
	    </para></listitem>
	  </varlistentry>
	</variablelist>
	<para>The name of this interfaces derives from a bit of computer
	  history.  Eric Raymond's <citation>Jargon File</citation> defines
	  <firstterm>blinkenlights</firstterm>, in part, as:
	</para>
	<blockquote>
	  <para>Front-panel diagnostic
	    lights on a computer, esp. a dinosaur. Now that dinosaurs are rare,
	    this term usually refers to status lights on a modem, network hub, or
	    the like.
	  </para>
	  <para>
	    This term derives from the last word of the famous blackletter-Gothic
	    sign in mangled pseudo-German that once graced about half the computer
	    rooms in the English-speaking world. One version ran in its entirety as
	    follows:
	  </para>
	  <para>
	    <emphasis>ACHTUNG!  ALLES LOOKENSPEEPERS!</emphasis>
	  </para>
	  <para>
	    Das computermachine ist nicht fuer gefingerpoken und mittengrabben.
	    Ist easy schnappen der springenwerk, blowenfusen und poppencorken
	    mit spitzensparken.  Ist nicht fuer gewerken bei das dumpkopfen.
	    Das rubbernecken sichtseeren keepen das cotten-pickenen hans in das
	    pockets muss; relaxen und watchen das blinkenlichten.
	  </para>
	</blockquote>
      </refsect2>

      <refsect2>
	<title>TTY.TTYUI</title>
	<para>
	  TTY.TTYUI interface is for people running in basic, non-color terminals.  It
	  prints out basic status messages and is generally friendly to use on a console
	  or xterm.
	</para>
      </refsect2>

      <refsect2>
	<title>Noninteractive.Basic</title>
	<para>
	  Noninteractive.Basic is designed for situations in which &datapacker;
	  will be run non-attended and the status of its execution will be
	  logged.  You might use it, for instance, to have the system run
	  automatically and
	  e-mail you the results of the synchronization.  This user interface
	  is not capable of reading a password from the keyboard; account
	  passwords must be specified using one of the configuration file options.
	</para>
      </refsect2>

      <refsect2>
	<title>Noninteractive.Quiet</title>
	<para>
	  Noninteractive.Quiet is designed for non-attended running in situations
	  where normal status messages are not desired.  It will output nothing
	  except errors and serious warnings.  Like Noninteractive.Basic,
	  this user interface
	  is not capable of reading a password from the keyboard; account
	  passwords must be specified using one of the configuration file options.
	</para>
      </refsect2>

      <refsect2>
        <title>Machine.MachineUI</title>
        <para>
           Machine.MachineUI generates output in a machine-parsable format.
           It is designed for other programs that will interface
           to OfflineIMAP.
        </para>
      </refsect2>

    </refsect1>

    <refsect1>
      <title>Examples</title>
      <para>Here are some example configurations for various situations.
	Please e-mail any other examples you have that may be useful to
	me.
      </para>

      <refsect2>
	<title>Multiple Accounts with Mutt</title>
	<para>
	  This example shows you how to set up &datapacker; to
	  synchronize multiple accounts with the mutt mail reader.
	</para>
	<para>
	  Start by creating a directory to hold your folders by running
	  <command>mkdir ~/Mail</command>.  Then, in your
	  <filename>~/.offlineimaprc</filename>, specify:
	</para>
	<programlisting>accounts = Personal, Work</programlisting>
	<para>
	  Make sure that you have both an
	  <property>[Account Personal]</property>
	  and an <property>[Account Work]</property> section.  The
	  local repository for each account must have different
	  <property>localfolder</> path names.
	  Also, make sure
	  to enable <property>[mbnames]</property>.
	</para>
	<para>
	  In each local repository section, write something like this:
	</para>
	<programlisting>localfolders = ~/Mail/Personal</programlisting>
	<para>
	  Finally, add these lines to your <filename>~/.muttrc</filename>:
	</para>
	<programlisting>source ~/path-to-mbnames-muttrc-mailboxes
folder-hook Personal set from="youremail@personal.com"
folder-hook Work set from="youremail@work.com"
set mbox_type=Maildir
set folder=$HOME/Mail
spoolfile=+Personal/INBOX</programlisting>
	<para>
	  That's it!
	</para>
      </refsect2>

      <refsect2>
	<title>UW-IMAPD and References</title>
	<para>Some users with a UW-IMAPD server need to use &datapacker;'s
	  "reference" feature to get at their mailboxes, specifying a reference
	  of "~/Mail" or "#mh/" depending on the configuration.  The below
	  configuration from (originally from docwhat@gerf.org)
	  shows using a <property>reference</property> of Mail, a <property>nametrans</property>
	  that strips
	  the leading Mail/ off incoming folder names, and a
	  <property>folderfilter</property> that
	  limits the folders synced to just three.
	</para>
	<programlisting>[Account Gerf]
localrepository = GerfLocal
remoterepository = GerfRemote

[Repository GerfLocal]
type = Maildir
localfolders = ~/Mail

[Repository GerfRemote]
type = IMAP
remotehost = gerf.org
ssl = yes
remoteuser = docwhat
reference = Mail
# Trims off the preceeding Mail on all the folder names.
nametrans = lambda foldername: \
            re.sub('^Mail/', '', foldername)
# Yeah, you have to mention the Mail dir, even though it
# would seem intuitive that reference would trim it.
folderfilter = lambda foldername: foldername in [
      'Mail/INBOX',
      'Mail/list/zaurus-general',
      'Mail/list/zaurus-dev',
      ]
maxconnections = 1
holdconnectionopen = no</programlisting>
      </refsect2>

      <refsect2>
	<title>pythonfile Configuration File Option</title>
	<para>You can have &datapacker;
	  load up a Python file before evaluating the
	  configuration file options that are Python expressions.  This example
	  is based on one supplied by Tommi Virtanen for this feature.
	</para>
	<para>
	  In <filename>~/.offlineimaprc</filename>, he adds these options:
	</para>
	<programlisting>[general]
pythonfile=~/.offlineimap.py
[Repository foo]
foldersort=mycmp</programlisting>
	<para>
	  Then, the <filename>~/.offlineimap.py</filename> file will
	  contain:
	</para>
	<programlisting>prioritized = ['INBOX', 'personal', 'announce', 'list']

def mycmp(x, y):
   for prefix in prioritized:
       xsw = x.startswith(prefix)
       ysw = y.startswith(prefix)
       if xsw and ysw:
          return cmp(x, y)
       elif xsw:
          return -1
       elif ysw:
          return +1
   return cmp(x, y)

def test_mycmp():
   import os, os.path
   folders=os.listdir(os.path.expanduser('~/data/mail/tv@hq.yok.utu.fi'))
   folders.sort(mycmp)
   print folders</programlisting>
	<para>
	  This code snippet illustrates how the <property>foldersort</property>
	  option can be customized with a Python function from the
	  <property>pythonfile</property> to always synchronize certain
	  folders first.
	</para>
      </refsect2>
    </refsect1>

    <refsect1>
            <title>Signals</title>
            <para>
                    OfflineIMAP writes its current PID into
                    <filename>~/.offlineimap/pid</filename> when it is
                    running.  It is not guaranteed that this file will
                    not exist when OfflineIMAP is not running.
            </para>
            <!-- not done yet 
            <para>
                    You can send SIGINT to OfflineIMAP using this file to
                    kill it.  SIGUSR1 will force an immediate resync of
                    all accounts.  This will be ignored for all accounts
                    for which a resync is already in progress.
            </para>
            -->
    </refsect1>
      
    <refsect1>
      <title>Errors</title>
      <para>
	If you get one of some frequently-encountered or confusing errors,
	please check this section.
      </para>
      
      <refsect2>
	<title>UID validity problem for folder</title>
	<para>IMAP servers use a unique ID (UID) to refer to a specific message.
	  This number is guaranteed to be unique to a particular message
	  <emphasis>forever</emphasis>.
	  No other message in the same folder will ever get the same
	  UID.  UIDs are an integral part of &datapacker;'s synchronization
	  scheme; they are used to match up messages on your computer to
	  messages on the server.
	</para>

	<para>
	  Sometimes, the UIDs on the server might get reset.  Usually this will
	  happen if you delete and then recreate a folder.  When you create a
	  folder, the server will often start the UID back from 1.  But
	  &datapacker; might still have the UIDs from the previous folder by the
	  same name stored.  &datapacker; will detect this condition and skip the
	  folder.  This is GOOD, because it prevents data loss.
	</para>

	<para>
	  You can fix it by removing your local folder and cache data.  For
	  instance, if your folders are under <filename>~/Folders</filename>
	  and the folder with the problem is INBOX, you'd type this:
	</para>

	<programlisting>rm -r ~/Folders/INBOX
rm -r ~/.offlineimap/Account-<replaceable>AccountName</>/LocalStatus/INBOX
rm -r ~/.offlineimap/Repository-<replaceable>RemoteRepositoryName</>/FolderValidity/INBOX</programlisting>

	<para>
	  (Of course, replace AccountName and RemoteRepositoryName 
	  with the names as specified
	  in <filename>~/.offlineimaprc</filename>).
	</para>

	<para>Next time you run &datapacker;, it will re-download
	  the folder with the
	  new UIDs.  Note that the procedure specified above will lose any local
	  changes made to the folder.
	</para>

	<para>
	  Some IMAP servers are broken and do not support UIDs properly.  If you
	  continue to get this error for all your folders even after performing
	  the above procedure, it is likely that your IMAP server falls into
	  this category.  &datapacker; is incompatible with such servers.
	  Using &datapacker; with them will not destroy any mail, but at the same time,
	  it will not actually synchronize it either.  (&datapacker; will detect
	  this condition and abort prior to synchronization.)
	</para>
	<para>
	  This question comes up frequently on the
	  <ulink
	  url="http://lists.complete.org/offlineimap@complete.org/">&datapacker;
	  mailing list</ulink>.  You can find a
	  <ulink
	  url="http://lists.complete.org/offlineimap@complete.org/2003/04/msg00012.html.gz">detailed
	  discussion</ulink> of the problem there.
	</para>
      </refsect2>
    </refsect1>
    <refsect1>
      <title>Conforming To</title>
      <itemizedlist>
	<listitem><para>Internet Message Access Protocol version 4rev1 (IMAP 4rev1) as
	  specified in RFC2060 and RFC3501</para></listitem>
	<listitem><para>CRAM-MD5 as specified in RFC2195</para></listitem>
	<listitem><para>Maildir as specified in
	  <ulink url="http://www.qmail.org/qmail-manual-html/man5/maildir.html">the Maildir manpage</ulink> and
	  <ulink url="http://cr.yp.to/proto/maildir.html">the qmail website</ulink>.</para></listitem>
	<listitem><para>Standard Python 2.2.1 as implemented on POSIX-compliant systems.</para></listitem>
      </itemizedlist>
    </refsect1>

    <refsect1>
      <title>Notes</title>
      <refsect2>
	<title>Deleting Local Folders</title>
	<para>&datapacker; does a two-way synchronization.  That is, if you
	  make a change to the mail on the server, it will be propagated to your
	  local copy, and vise-versa.  Some people might think that it would be
	  wise to just delete all their local mail folders periodically.  If you
	  do this with &datapacker;, remember to also remove your local status
	  cache (<filename>~/.offlineimap</filename> by default).  Otherwise, &datapacker; will take
	  this as an intentional deletion of many messages and will interpret
	  your action as requesting them to be deleted from the server as well.
	  (If you don't understand this, don't worry; you probably won't
	  encounter this situation)
	</para>
      </refsect2>

      <refsect2>
	<title>Multiple Instances</title>
	<para>&datapacker; is not designed to have several instances (for instance, a cron job and an interactive invocation) run over the same
	  mailbox simultaneously.  It will perform a check on startup and
	  abort if another &datapacker; is already running.  If you need
	  to schedule synchronizations, you'll probably find
	  <property>autorefresh</property> settings more convenient than cron.
	  Alternatively, you can set a separate <property>metadata</property>
	  directory for each instance.
	</para>
      </refsect2>

      <refsect2>
	<title>Copying Messages Between Folders</title>
	<para>
	  Normally, when you copy a message between folders or add a new message
	  to a folder locally, &datapacker;
	  will just do the right thing.  However, sometimes this can be tricky
	  -- if your IMAP server does not provide the SEARCH command, or does
	  not return something useful, &datapacker;
	  cannot determine the new UID of the message.  So, in these rare
	  instances, OfflineIMAP will upload the message to the IMAP server and
	  delete it from your local folder.  Then, on your next sync, the
	  message will be re-downloaded with the proper UID.
	  &datapacker; makes sure that the message was properly uploaded before deleting it,
	  so there should be no risk of data loss.
	</para>
      </refsect2>


      <refsect2>
	<title>Mailing List</title>
	<para>There is an OfflineIMAP mailing list available.
	  To subscribe, send the text "Subscribe" in the subject of a mail to
	  offlineimap-request@complete.org.  To post, send the message to
	  offlineimap@complete.org.  Archives are available at
	  <ulink url="http://lists.complete.org/offlineimap@complete.org/"></>.
	</para>
      </refsect2>

      <refsect2>
	<title>Bugs</title>
	<para>
          Reports of bugs should be reported online at the
          &datapacker; homepage.
          Debian users are encouraged to instead use the
	Debian
          bug-tracking system.
	</para>
      </refsect2>
    </refsect1>

    <refsect1 id="upgrading.4.0">
      <title>Upgrading to 4.0</title>
      <para>
	If you are upgrading from a version of &datapacker; prior to
	3.99.12, you will find that you will get errors when
	&datapacker; starts up (relating to ConfigParser or
	AccountHashGenerator) and the
	configuration file.  This is because the config file format
	had to change to accommodate new features in 4.0.  Fortunately,
	it's not difficult to adjust it to suit.
      </para>
      <para>
	First thing you need to do is stop any running &datapacker;
	instance, making sure first that it's synced all your mail.
	Then, modify your
	<filename>~/.offlineimaprc</filename> file.  You'll need to
	split up each account section (make sure that it now starts
	with "Account ") into two Repository sections (one for the
	local side and another for the remote side.)  See the files
	<filename>offlineimap.conf.minimal</filename> and
	<filename>offlineimap.conf</filename> in the distribution if
	you need more assistance.
      </para>
      <para>
	&datapacker;'s status directory area has also changed.
	Therefore, you should delete everything in ~/.offlineimap as
	well as your local mail folders.
      </para>
      <para>
	When you start up &datapacker; 4.0, it will re-download all
	your mail from the server and then you can continue using it
	like normal.
      </para>
    </refsect1>
	

    <refsect1>
      <title>Copyright</title>
      <para>OfflineIMAP, and this manual, are Copyright &copy; 2002 - 2006 John Goerzen.</para>

      <para>
	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.
      </para>

      <para>
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
      </para>

      <para>
	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA</para>

      <para>imaplib.py comes from the Python dev tree and is licensed under
	the GPL-compatible PSF license as stated in the file
	<filename>COPYRIGHT</filename> in the &datapacker;
         distribution.
      </para>
    </refsect1>

    <refsect1>
      <title>Author</title>
      <para>&datapacker;, its libraries, documentation, and all included files, except where
	noted, was written by John Goerzen <email>jgoerzen@complete.org</email> and
	copyright is held as stated in the COPYRIGHT section.
      </para>

      <para>
	&datapacker; may be downloaded, and information found, from its
	<ulink url="http://software.complete.org/offlineimap">homepage</ulink>.
      </para>

    </refsect1>

    <refsect1>
      <title>See Also</title>
      <para><application>mutt</application>(1),
	<application>python</application>(1)
      </para>
    </refsect1>

    <refsect1>
      <title>History</title>
      <para>
	Detailed history may be found in the file ChangeLog in the
	&datapacker; distribution.  Feature and bug histories may be
	found in the file debian/changelog which, despite its name, is
	not really Debian-specific.  This section provides a large
	overview.
      </para>
      <para>
	Development on &datapacker; began on June 18, 2002.  Version
	1.0.0 was released three days later on June 21, 2002.  Point
	releases followed, including speed optimizations and some
	compatibility fixes.
      </para>
      <para>Version 2.0.0 was released on July 3, 2002, and
	represented the first time the synchronization became
	multithreaded and, to the best of my knowledge, the first
	multithreaded IMAP syncrhonizing application in existance.
	The last 2.0.x release, 2.0.8, was made on July 9.
      </para>
      <para>
	Version 3.0.0 was released on July 11, 2002, and introduced
	modular user interfaces and the first GUI interface for
	&datapacker;.  This manual also was introduced with 3.0.0,
	along with many command-line options.  Version 3.1.0 was
	released on July 21, adding the Noninteractive user
	interfaces, profiling support, and several bugfixes.  3.2.0
	was released on July 24, adding support for the Blinkenlights
	GUI interface.  &datapacker; entered maintenance mode for
	awhile, as it had reached a feature-complete milestone in my
	mind.
      </para>
      <para>
	The 3.99.x branch began in on October 7, 2002, to begin work
	for 4.0.  The Curses.Blinkenlights interface was added in
	3.99.6, and many architectural changes were made.
      </para>
      <para>
	4.0.0 was released on July 18, 2003, including the ability to
            synchronize directly between two IMAP servers, the first
            re-architecting of the configuration file to refine the
            notion of an account, and the new Curses interface.
      </para>
    </refsect1>
  </refentry>
</reference>

<!--
Local Variables:
mode: sgml
sgml-set-face: T
End:
-->
